# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    CommerceKitty\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    CommerceKitty\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    _instanceof:
        CommerceKitty\MessageHandler\Command\CommandHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: command.bus }
        CommerceKitty\MessageHandler\Query\QueryHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: query.bus }
        CommerceKitty\MessageHandler\Event\EventHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: event.bus }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # @todo Make for various menus?
    CommerceKitty\Menu\MenuBuilder:
        autowire: true
        tags:
            - { name: knp_menu.menu_builder, method: buildGenericMenu, alias: generic_menu }

    # This just fires events that other Listeners/Subscribers will listen to
    CommerceKitty\EventListener\DoctrineLifecycleListener:
        autowire: true
        tags:
            - { name: doctrine.event_listener, event: preRemove }
            - { name: doctrine.event_listener, event: postRemove }
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postUpdate }

    CommerceKitty\EventListener\Channel\Woocommerce\TestConnectionListener:
        autowire: true
        tags:
            - { name: kernel.event_listener, event: channel.woocommerce.test_connection }
